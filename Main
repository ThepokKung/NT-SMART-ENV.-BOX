//include libary
#include <HTTP_Method.h>
#include <Uri.h>
#include <WebServer.h>
#include <HTTPClient.h>
#include <Wire.h>
#include <WiFi.h>
#include <PubSubClient.h>
#include  <LiquidCrystal_I2C.h>
LiquidCrystal_I2C  lcd(0x27, 20, 4);
#include <PMsensor.h>
#include "DHT.h"
#include <ArduinoJson.h>

//define
#define DHTPIN 27
#define DHTTYPE DHT11

// Wifi Name-password
//const char* host = "jobm.edoclite.online";  //ใส่ IP หรือ Host ของเครื่อง Database ก็ได้
char* ssid = "ThepokKung_reset"; //Wifi Name
char* password = "1234567890_0987654321"; //Wifi Password
//MQTT connected
//Test server
const char* mqttServer = "broker.mqttdashboard.com";
const int mqttPort = 1883;
const char* mqttUser = "";
const char* mqttPassword = "";

char mqtt_name_id[] = "";

char* env;

/*
  const char* mqttServer = "broker.mqttdashboard.com";
  const int mqttPort = 1883;
  const char* mqttUser = "";
  const char* mqttPassword = "";
*/

//Vallue
PMsensor PM;
int  samplingTime  =  280;
int  deltaTime  =  40;
int  sleepTime  =  9680;
float  voMeasured  =  0;
float calcVoltage = 0;
float  dustDensity  =  0;
float  temp = 0;
float  humi = 0;
//int LED_BUILTIN = 2;
long now = millis();

WiFiClient client;
PubSubClient mqtt(client);
DHT dht(DHTPIN, DHTTYPE);

//Json
////////////////////////////////////////////////////
StaticJsonDocument<256> doc;
char buffer[256];
////////////////////////////////////////////////////
void setup() {
  // initialize the LCD,
  lcd.begin();
  // Turn on the blacklight and print a message.
  lcd.backlight();
  lcd.clear();
  setuplcd();
  dht.begin();
  Serial.begin(9600);
  PM.init(16, 36);
  
  //Login all
  setupwifi(); //Wifi login
  mqtt.setServer(mqttServer, mqttPort); //Login MQTT
  mqtt.setCallback(callback);
}

void setuplcd() {
  //  Print  a  message  to  the  LCD.
  lcd.setCursor (9, 1);
  lcd.print("NT");
  lcd.setCursor (3, 2);
  lcd.print("SMART ENV. BOX");
  delay(3000);
  lcd.clear();

  //  Print  a  message  to  the  LCD.
  lcd.backlight();
  lcd.setCursor(3, 0);
  lcd.print("TEMP:");
  lcd.setCursor(15, 0);
  lcd.print("C ");

  lcd.setCursor(3, 1);
  lcd.print("HUMI:");
  lcd.setCursor(15, 1);
  lcd.print("%");

  lcd.setCursor(0, 2);
  lcd.print("PM2.5:");
  lcd.setCursor(15, 2);
  lcd.print("ug/m3");
}

void setupwifi() {
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.mode(WIFI_STA);
  WiFi.disconnect();
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void callback (char* topic, byte* payload, unsigned int length) {

  ///////////////////////////////////////////////////////////////////////////////////////////////
  /*
    // handle message arrived
    char inData[80];

    Serial.print("payload: ");
    for (int i = 26; i < length; i++) {
    // Serial.print((char)payload[i]);
    inData[(i - 26)] = (char)payload[i];
    }
    Serial.println();

    JsonObject& root = jsonBuffer.parseObject(inData);
  */
  ///////////////////////////////////////////////////////////////////////////////////////////////
  deserializeJson(doc, payload, length);
  size_t n = serializeJson(doc, buffer);
  ///////////////////////////////////////////////////////////////////////////////////////////////
  if (mqtt.connect("ntnode/sensors/", mqttUser, mqttPassword)) {
    if (mqtt.publish("ntnode/sensors/", buffer, n) == true) {
      Serial.println("publish Valve status success");

    } else {
      Serial.println("publish Fail");
    }
  } else {
    Serial.println("Connect Fail MQTT");
  }
}

void reconnect() {
  while (!mqtt.connected()) {
    Serial.print("Attempting MQTT connection...");
    if (mqtt.connect("client")) {
      Serial.println("connected");
      // Subscribe or resubscribe to a topic
      // You can subscribe to more topics (to control more LEDs in this example)
    } else {
      Serial.print("failed, rc=");
      Serial.print(mqtt.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

unsigned long Now_Time, PreView_Time;

void loop() {
  // Reconnect MQTT
  if (!mqtt.connected()) {
    Serial.println("---Reconnect MQTT ---");
    reconnect();
  }
  mqtt.loop();

  /////////////////////////////////////////////////////////////////////////////////////

  float h = dht.readHumidity();
  // Read temperature as Celsius (the default)
  float t = dht.readTemperature();
  // Read temperature as Fahrenheit (isFahrenheit = true)
  float f = dht.readTemperature(true);

  float Humidity = dht.readHumidity();
  // Read temperature as Celsius (the default)
  float Temp = dht.readTemperature();
  // Read temperature as Fahrenheit (isFahrenheit = true)
  //float f = dht.readTemperature(true);

  // Check if any reads failed and exit early (to try again)
  if (isnan(h) || isnan(t) || isnan(f)) {
    Serial.println(F("Failed to read from DHT sensor!"));
    return;
  }
  // Compute heat index in Fahrenheit (the default)
  float hif = dht.computeHeatIndex(f, h);
  // Compute heat index in Celsius (isFahreheit = false)
  float hic = dht.computeHeatIndex(t, h, false);

  float filter_Data = PM.read(0.1);
  float noFilter_Data = PM.read();

  /////////////////////////////////////////////////////////////////////////////////////

  temp = t;
  humi = h;

  /////////////////////////////////////////////////////////////////////////////////////

  calcVoltage  =  noFilter_Data  *  (5.0 /  1024.0);
  dustDensity  =  17.1  *  calcVoltage  -  0.1;
  if (dustDensity >= 230) dustDensity = 231;

  lcd.setCursor(9, 0);
  lcd.print(t);

  lcd.setCursor(9, 1);
  lcd.print(h);

  lcd.setCursor(8, 2);

  if (dustDensity < 0) {
    lcd.print("0");
  } else if (dustDensity > 230) {
    lcd.print("> 230");
  } else {
    lcd.print(dustDensity);
  }
  if (dustDensity >= 201) { //201++
    lcd.setCursor(5, 3);
    lcd.print("---Danger---");
    Serial.println("---Danger---");
  } else if (dustDensity >= 151) { //151-200
    lcd.setCursor(5, 3);
    lcd.print("--VeryHigh--");
    Serial.println("--VeryHigh--");
  } else if (dustDensity >= 101) { //101-150
    lcd.setCursor(5, 3);
    lcd.print("----High----");
    Serial.println("----High----");
  } else if (dustDensity >= 51) {  //51-100
    lcd.setCursor(5, 3);
    lcd.print("---Medium---");
    Serial.println("---Medium---");
  } else if (dustDensity >= 26) {  // 26-50
    lcd.setCursor(5, 3);
    lcd.print("----Good----");
    Serial.println("----Good----");
  } else {                         //0-25
    lcd.setCursor(5, 3);
    lcd.print("--VeryGood--");
    Serial.println("--VeryGood--");
  }

  /////////////////////////////////////////////////////////////////////////////////////

  doc["deviceid"] = "SMART ENV. BOX";
  doc["temp"] = t;
  doc["humi"] = h;
  doc["dust"] = dustDensity;

  /////////////////////////////////////////////////////////////////////////////////////

    size_t n = serializeJson(doc, buffer);

    if (mqtt.connect(mqtt_name_id, mqttUser, mqttPassword)) {
      Serial.println("\nConnected MQTT: ");
      if (mqtt.publish("ntnode/sensors/", buffer , n) == true) {
        Serial.println("publish success");
      } else {
        Serial.println("publish Fail");
      }
    } else {
      Serial.println("Connect Fail MQTT");
    }

  /////////////////////////////////////////////////////////////////////////////////////
  delay(1000);
}
